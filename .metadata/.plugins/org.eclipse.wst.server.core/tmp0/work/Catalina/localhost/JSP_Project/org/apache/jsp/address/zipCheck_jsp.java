/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/10.1.36
 * Generated at: 2025-03-06 06:41:45 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp.address;

import jakarta.servlet.*;
import jakarta.servlet.http.*;
import jakarta.servlet.jsp.*;
import com.address.ZipCode;
import java.util.ArrayList;
import com.address.AddressDAO;

public final class zipCheck_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports,
                 org.apache.jasper.runtime.JspSourceDirectives {

  private static final jakarta.servlet.jsp.JspFactory _jspxFactory =
          jakarta.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.LinkedHashSet<>(4);
    _jspx_imports_packages.add("jakarta.servlet");
    _jspx_imports_packages.add("jakarta.servlet.http");
    _jspx_imports_packages.add("jakarta.servlet.jsp");
    _jspx_imports_classes = new java.util.LinkedHashSet<>(4);
    _jspx_imports_classes.add("com.address.ZipCode");
    _jspx_imports_classes.add("com.address.AddressDAO");
    _jspx_imports_classes.add("java.util.ArrayList");
  }

  private volatile jakarta.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public boolean getErrorOnELNotFound() {
    return false;
  }

  public jakarta.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final jakarta.servlet.http.HttpServletRequest request, final jakarta.servlet.http.HttpServletResponse response)
      throws java.io.IOException, jakarta.servlet.ServletException {

    if (!jakarta.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      final java.lang.String _jspx_method = request.getMethod();
      if ("OPTIONS".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        return;
      }
      if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSP들은 오직 GET, POST 또는 HEAD 메소드만을 허용합니다. Jasper는 OPTIONS 메소드 또한 허용합니다.");
        return;
      }
    }

    final jakarta.servlet.jsp.PageContext pageContext;
    jakarta.servlet.http.HttpSession session = null;
    final jakarta.servlet.ServletContext application;
    final jakarta.servlet.ServletConfig config;
    jakarta.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    jakarta.servlet.jsp.JspWriter _jspx_out = null;
    jakarta.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html; charset=UTF-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("<!DOCTYPE html>\r\n");
      out.write("<html>\r\n");
      out.write("<head>\r\n");
      out.write("<meta charset=\"UTF-8\">\r\n");
      out.write("<title>Insert title here</title>\r\n");
      out.write("\r\n");
      out.write("<style>\r\n");
      out.write("a:link   {text-decoration:none; color:#000}\r\n");
      out.write("a:hover  {text-decoration:none; color:#000}\r\n");
      out.write("a:visited{text-decoration:none; color:#000}\r\n");
      out.write("</style>\r\n");
      out.write("\r\n");

request.setCharacterEncoding("utf-8");
String dong = request.getParameter("dong");
AddressDAO dao = new AddressDAO();
ArrayList<ZipCode> zarr=dao.zipcodeRead(dong);

      out.write("\r\n");
      out.write("\r\n");
      out.write("<script>\r\n");
      out.write("function dongCheck(){\r\n");
      out.write("	if(document.getElementById('dong').value==\"\"){\r\n");
      out.write("		alert(\"동 이름을 입력하세요\")\r\n");
      out.write("		 return;\r\n");
      out.write("	}\r\n");
      out.write("	document.querySelector(\"#frm\").submit();\r\n");
      out.write("}\r\n");
      out.write("\r\n");
      out.write("function send(code,sido,gugun,dong,bunji){\r\n");
      out.write("	const address=sido+\" \"+gugun+\" \"+dong+\" \"+bunji\r\n");
      out.write("	opener.document.querySelector(\"#zipcode\").value=code\r\n");
      out.write("	opener.document.querySelector(\"#addr\").value=address\r\n");
      out.write("	self.close()\r\n");
      out.write("	\r\n");
      out.write("}\r\n");
      out.write("</script>\r\n");
      out.write("</head>\r\n");
      out.write("<body>\r\n");
      out.write("<h3>우편번호 찾기</h3>\r\n");
      out.write("<form action=\"zipCheck.jsp\" id=\"frm\">\r\n");
      out.write("  <table>\r\n");
      out.write("      <tr>\r\n");
      out.write("          <td>동이름 입력\r\n");
      out.write("          <input type = text id=\"dong\" name=\"dong\">\r\n");
      out.write("           <button type =\"button\" onclick =\"dongCheck()\">검색</button> </td>\r\n");
      out.write("      </tr>\r\n");
      out.write("      <tr>\r\n");
      out.write("      ");

      if(zarr.isEmpty()){
    	  
      out.write("\r\n");
      out.write("    	<td>검색 결과가 없습니다.</td>\r\n");
      out.write("      ");

      }else{
    	  
      out.write("\r\n");
      out.write("    	  <td>* 검색 후 아래 우편번호를 클릭하면 자동 입력됩니다.</td>\r\n");
      out.write("    	  ");

      }
     
      out.write("\r\n");
      out.write("      </tr>\r\n");
      out.write("      ");

      for(ZipCode z:zarr){
    	  String zip=z.getZipcode();
    	  String sido=z.getSido();
    	  String gugun=z.getGugun();
    	  String d=z.getDong();
    	  String bunji=z.getBunji();
    	  
      out.write("\r\n");
      out.write("    	  <tr>\r\n");
      out.write("    	  	<td><a href=\"javascript:send('");
      out.print(zip );
      out.write('\'');
      out.write(',');
      out.write('\'');
      out.print(sido );
      out.write('\'');
      out.write(',');
      out.write('\'');
      out.print(gugun );
      out.write('\'');
      out.write(',');
      out.write('\'');
      out.print(d );
      out.write('\'');
      out.write(',');
      out.write('\'');
      out.print(bunji );
      out.write("')\">\r\n");
      out.write("    	  	");
      out.print(zip );
      out.print(sido );
      out.print(gugun );
      out.print(d );
      out.print(bunji );
      out.write("</a></td>\r\n");
      out.write("    	  </tr>\r\n");
      out.write("    	  \r\n");

      }
      
      out.write("\r\n");
      out.write("    </table>\r\n");
      out.write("</form>\r\n");
      out.write("</body>\r\n");
      out.write("</html>");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof jakarta.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
